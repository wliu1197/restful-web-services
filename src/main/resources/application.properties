spring.application.name=restful-web-services
server.port=8081
say.hello.to.name=wenhao
server.error.include-message=always

spring.jpa.show-sql=true
spring.jpa.defer-datasource-initialization=true

#actuator
management.endpoint.health.access=unrestricted
management.endpoints.web.base-path=/
#
# for in memory h2 db spring entity mapping will auto generate database tables according to entity mapping for us
#
# spring.h2.console.enabled=true
# spring.datasource.url=jdbc:h2:mem:testdb

#
# As we have my sql set up in docker container so we can connect to mysql insead of h2 in memory db
# See ReadMe file of how to set it up
#

#connect local springboot to mysql in docker container
#spring.datasource.url=jdbc:mysql://localhost:3306/social-media-database
#spring.datasource.username=root
#spring.datasource.password=dummypassword


#from springboot container connect to mysql docker container
#replace localhost with it
#get params from docker-compose env attributes
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/social-media-database}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:root}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:dummypassword}



#
# For MySql spring entity mapping won't auto generate database table for us 
# However if we need we can configure by suing spring.jpa.hibernate.ddl-auto=update
# none, create, create-drop(for testing create and remove), validate, and update (update column without remove data) 
# WARNING: dangerous to use this as if we have connect to an existing db 
# In production, it's often highly recommended you use none or simply don't specify this property.
#
spring.jpa.hibernate.ddl-auto=update

#springdoc.swagger-ui.tryItOutEnabled=false
#springdoc.swagger-ui.supportedSubmitMethods=["get", "head"]

################### AWS Elastic beanstalk related configuration ###############################

#Elastic beanstalk use AWS RDS env variables for connection
#aws document link
#https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/rds-external-defaultvpc.html
#spring.datasource.url=jdbc:mysql://${RDS_HOSTNAME:localhost}:${RDS_PORT:3306}/${RDS_DB_NAME:social-media-database}
#spring.datasource.username=${RDS_USERNAME:root}
#spring.datasource.password=${RDS_PASSWORD:dummypassword}

#AWS PORT 5000
#server.port=5000

#or in aws beanstalk add env variable PORT 8081 to match our rest api port